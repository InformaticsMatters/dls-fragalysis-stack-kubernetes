---

# The stack image you want to deploy,
# consisting of a (public) container registry,
# image, image tag and replicas...
stack_image_registry: docker.io
stack_image: xchem/fragalysis-stack
stack_image_tag: latest
stack_replicas: 2
# Deploy the nery service?
stack_deploy_nery: no

# A boolean, set if the stack deployment is for a developer
# i.e. not a PRODUCTION deployment.
# Developer stacks get their own auto-generated namespaces
# and ingress routes. Non-developer stacks need an explicit
# 'stack_namespace' and 'stack_hostname'.
stack_is_for_developer: yes

# The namespace to deploy the stack to.
# Not defined for user stacks  where the namespace will be created
# from the user (developer) ID and will be 'stack-{{ id }}-{{ stack_name }}'.
stack_namespace: ''

# The hostname that will be used to connect to the stacks.
# This will be a URL directed at the cluster.
#
# Developer stacks will prepend a unique value to to make the route
# specific for that developer they wil get somethign like
# https://{{ id }}-{{ stack_name }}.{{ stack_hostname }}.
#
# Production stacks must provide an explicit `stack_hostname` here,
# i.e. 'fragalysis.diamond.ac.uk'
stack_hostname: ''

# A symbolic name for your stack, used if you do not provide your own
# 'stack_namespace' value. When you do not provide a namespace the stack
# namespace you're given is automatic and based on your AWX user ID.
# The 'stack_name' allows you to deploy more than one
# stack at a time, each with its own name using the same user ID.
#
# The name is used to further distinguish the https route to the application
# as your application will be available using the hostname: -
#
#   https://{{ id }}-{{ stack_name }}.{{ stack_hostname }}
#
# The name can only consist of lower-case letters.
stack_name: default

# Build the XChem Database?
# If 'yes' then you will need to ensure that you provide suitable values for
# the following variables, used to create the xchem secrets, otherwise the
# stack will fail to start: -
# - XCHEM_NAME
# - XCHEM_USER
# - XCHEM_PASSWORD
# - XCHEM_HOST
# - XCHEM_PORT
# They are normally encrypted using Ansible Vault in the project's
# 'sensitive.yaml' file.
stack_build_xcdb: no

# The storage class of the volume used for the stack's media folder.
# If left as an empty string the default storage class of the cluster
# will be used. You should strive to use a named storage class, e.g. 'efs'.
stack_media_vol_storageclass: ' '

# Variables controlling the deployed database image.
# Define a database host if a pre-existing database is to be used.
# If blank a database will be created specifically for the stack.
database_host: ''
# If you're not using an externally provisioned (pre-existing database)
# then you must provide a storage class for the data volume that will be
# created, unless the default storage class will suffice
# (represented by a blank, single space).
database_vol_storageclass: ' '

# Database backups
database_bu_state: absent
database_bu_image_tag: '2020.4'
database_bu_vol_storageclass: ' '
database_bu_vol_size_g: 4
database_bu_hourly_schedule: '51 * * * *'
database_bu_hourly_history: 24
# Set the following to rsync the backups to a central server.
# If set you must define: -
#   stack_backup_rsync_host
#   stack_backup_rsync_path
#   stack_backup_rsync_user
#   stack_backup_rsync_pass
# (found in vars/sensitive.vault)
database_bu_use_rsync: no

# AWX Credentials -------------------------------------------------------------
# The following variables can be provided by AWX credentials,
# so their variables names are not to be altered. If not using AWX
# to inject values you can provide your own.

# The Graph instance to connect to.
graph_hostname: ''
graph_password: ''
