---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: stack
  namespace: {{ stack_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: stack
  serviceName: stack
  replicas: {{ stack_replicas }}
  template:
    metadata:
      name: stack
      labels:
        name: stack
    spec:
      serviceAccountName: stack

      initContainers:
{% if database_host|string|length > 0 %}
      - image: 'busybox:1.28.0'
        name: wait-for-db
        command:
        - 'sh'
        - '-c'
        - 'until nslookup {{ databse_host }}; do echo waiting for db; sleep 1; done;'
{% endif %}

      # A 'preferred' (not guaranteed)
      # node selection affinity...
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - {{ stack_node_purpose }}

      # Init Containers
      initContainers:
      - image: busybox:1.28.0
        name: wait-for-graph
        command:
        - 'sh'
        - '-c'
        - 'until nslookup {{ graph_hostname }}; do echo waiting for neo4j; sleep 1; done;'

      containers:
      - name: stack
        image: '{{ stack_image_registry }}/{{ stack_image }}:{{ stack_image_tag }}'
{% if stack_image_tag in ['latest', 'stable'] %}
        imagePullPolicy: Always
{% else %}
        imagePullPolicy: IfNotPresent
{% endif %}
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: {{ stack_cpu_limit }}
            memory: {{ stack_mem_limit }}
          requests:
            cpu: {{ stack_cpu_request }}
            memory: {{ stack_mem_request }}
        # Expect the earliest that the container can be ready is 60 seconds.
        # But check every 15 seconds and permit 36 failures before
        # considering the startup to have failed (that's about 10 minutes).
        readinessProbe:
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 3
          failureThreshold: 36
          tcpSocket:
            port: 80
        # Consider the container dead if the port is not open
        # after 4 attempts over a 1 minute period after about 4 minutes.
        livenessProbe:
          initialDelaySeconds: 240
          periodSeconds: 15
          timeoutSeconds: 3
          failureThreshold: 4
          tcpSocket:
            port: 80
        env:
        - name: NEO4J_BOLT_URL
          value: bolt://neo4j:test@{{ graph_hostname }}:7687
        - name: NEO4J_QUERY
          value: {{ graph_hostname }}
        - name: NEO4J_AUTH
          value: 'neo4j/{{ graph_password }}'
        # Extracted from stack secrets...
        #
        - name: WEB_DJANGO_SUPERUSER_NAME
          value: admin
        - name: WEB_DJANGO_SUPERUSER_EMAIL
          value: noone@example.com
        - name: WEB_DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: django
              key: secret_key
        - name: WEB_DJANGO_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django
              key: superuser_password
        # Extracted from database secrets...
        #
        - name: POSTGRESQL_DATABASE
          value: frag
        - name: POSTGRESQL_USER
          value: fragalysis
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: user_password
        - name: POSTGRESQL_HOST
          value: '{{ database_host_fact }}'
        - name: POSTGRESQL_PORT
          value: '{{ database_port_fact }}'
        # Extracted from ispyb secrets...
        #
        - name: ISPYB_USER
          valueFrom:
            secretKeyRef:
              name: ispyb
              key: user
        - name: ISPYB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ispyb
              key: password
        - name: ISPYB_HOST
          valueFrom:
            secretKeyRef:
              name: ispyb
              key: host
        - name: ISPYB_PORT
          valueFrom:
            secretKeyRef:
              name: ispyb
              key: port
        # Extracted from xchem secrets...
        #
        - name: XCHEM_NAME
          valueFrom:
            secretKeyRef:
              name: xchem
              key: name
        - name: XCHEM_USER
          valueFrom:
            secretKeyRef:
              name: xchem
              key: user
        - name: XCHEM_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xchem
              key: password
        - name: XCHEM_HOST
          valueFrom:
            secretKeyRef:
              name: xchem
              key: host
        - name: XCHEM_PORT
          valueFrom:
            secretKeyRef:
              name: xchem
              key: port
        - name: BUILD_XCDB
{% if stack_build_xcdb %}
          value: 'yes'
{% else %}
          value: 'no'
{% endif %}
        # CICD_TRIGGER_ID is variable whose value is controlled
        # by the prevailing CI/CD process. Its value
        # is defined by the CI/CD process and is used to force
        # a redeployment of the underlying pods. This is used in
        # situations where the origin image's tag may not have changed
        # (e.g. it's 'latest' or 'stable') but a new build is expected to
        # be available. Without changing something in the StatefulSet spec
        # a roll-out will not occur if the tag has not changed.
        # The CI/CD process guarantees to change the value of this field
        # for each intended image change.
        - name: CICD_TRIGGER_ID
          value: '{{ stack_cicd_trigger_id }}'
        volumeMounts:
        - name: media
          mountPath: /code/media

      volumes:
      - name: media
        persistentVolumeClaim:
          claimName: media
