---

- name: Create database volume claim
  k8s:
    definition: "{{ lookup('template', 'pvc-database.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Best practice ... wait for the PVC to bind.
# e.g. wait until resources[0].status.phase == Bound (initially Pending)

- name: Wait for database volume claim to bind
  k8s_info:
    kind: PersistentVolumeClaim
    name: database
    namespace: "{{ stack_namespace }}"
  register: bind_result
  until: bind_result.resources[0].status.phase == 'Bound'
  delay: 5
  retries: "{{ (bind_timeout|int / 5)|int }}"
  when: wait_for_bind|bool

# Now the database secrets.
#
# We rely on random passwords but only if they've not already been deployed.
# It's too complicated to change root password if it's already been set so,
# if the secret exists then we pull values from the deployed object
# and we do not write them again.

- name: Check database secrets
  k8s_info:
    kind: Secret
    api_version: v1
    namespace: "{{ stack_namespace }}"
    name: database
  register: s_result

- name: Set database location (internal)
  set_fact:
    database_host_fact: database.{{ stack_namespace }}.svc
    database_port_fact: "{{ database_port }}"
  when: database_host|string|length == 0

- name: Set database location (external)
  set_fact:
    database_host_fact: database_host
    database_port_fact: "{{ database_port }}"
  when: database_host|string|length > 0

- name: Display database location
  debug:
    msg: >-
      database_host_fact={{ database_host_fact }}
      database_port_fact={{ database_port_fact }}

- name: Set database secret facts (new)
  set_fact:
    stack_db_root_password_fact: "{{ database_root_password }}"
    stack_db_user_password_fact: "{{ database_user_password }}"
  when: s_result.resources|length == 0

- name: Write database secrets
  k8s:
    definition: "{{ lookup('template', 'secret-database.yaml.j2') }}"
    wait: yes
  when: s_result.resources|length == 0

- name: Set database secret facts (from secrets)
  set_fact:
    database_host_fact: "{{ s_result.resources[0].data.host|b64decode }}"
    database_port_fact: "{{ s_result.resources[0].data.port|b64decode }}"
    stack_db_root_password_fact: "{{ s_result.resources[0].data.root_password|b64decode }}"
    stack_db_user_password_fact: "{{ s_result.resources[0].data.user_password|b64decode }}"
  when: s_result.resources|length == 1

# Now deploy the database and its service.

- name: Deploy database
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - configmap-postgres-conf
  - configmap-postgres-init
  - statefulset-database
  - service-database

- name: Wait for database to become Ready
  k8s_info:
    kind: Pod
    name: database-0
    namespace: "{{ stack_namespace }}"
  register: db_result
  until: >-
    db_result.resources is defined
    and db_result.resources|length == 1
    and db_result.resources[0].status is defined
    and db_result.resources[0].status.containerStatuses is defined
    and db_result.resources[0].status.containerStatuses|length == 1
    and db_result.resources[0].status.containerStatuses[0].ready
  delay: 10
  retries: "{{ (wait_timeout|int / 10)|int }}"

# Database (backups) ----------------------------------------------------------

- name: Database backup
  block:

  - name: Get {{ database_bu_vol_storageclass }} StorageClass
    k8s_info:
      kind: StorageClass
      name: "{{ database_bu_vol_storageclass }}"
    register: sc_result
    when: database_bu_vol_storageclass != " "

  - name: Assert {{ database_bu_vol_storageclass }} StorageClass
    assert:
      that: sc_result.resources|length == 1
      fail_msg: The {{ database_bu_vol_storageclass }} StorageClass must be available on the cluster
    when: database_bu_vol_storageclass != " "

  - name: Create postgres backup volume claim ({{ database_bu_vol_storageclass }})
    k8s:
      definition: "{{ lookup('template', 'pvc-postgres-backup.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  - name: Wait for postgres backup volume claim to bind
    k8s_info:
      kind: PersistentVolumeClaim
      name: database-backup
      namespace: "{{ stack_namespace }}"
    register: bu_pvc_result
    until: >-
      bu_pvc_result.resources|length > 0
      and bu_pvc_result.resources[0].status is defined
      and bu_pvc_result.resources[0].status.phase == 'Bound'
    delay: 5
    retries: "{{ (bind_timeout|int / 5)|int }}"
    when: wait_for_bind|bool

  - name: Write backup rsync secrets
    k8s:
      definition: "{{ lookup('template', 'secret-backup-rsync.yaml.j2') }}"
      wait: yes
    when: database_bu_use_rsync|bool

  - name: Deploy hourly backup
    k8s:
      definition: "{{ lookup('template', 'cronjob-postgres-backup.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  when: database_bu_state|string == 'present'
