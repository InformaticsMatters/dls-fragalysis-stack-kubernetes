---

- name: Create stack media volume claim
  k8s:
    definition: "{{ lookup('template', 'pvc-media.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Best practice ... wait for the PVC to bind.
# e.g. wait until resources[0].status.phase == Bound (initially Pending)

- name: Wait for stack media volume claim to bind
  k8s_info:
    kind: PersistentVolumeClaim
    name: media
    namespace: "{{ stack_namespace }}"
  register: bind_result
  until: bind_result.resources[0].status.phase == 'Bound'
  delay: 5
  retries: "{{ (bind_timeout|int / 5)|int }}"

# Deploy stack secrets.
#
# These come in three forms: -
# - Secrets for the app itself (django material)
# - Secrets for the Diamond ISPyB service
# - Secrets for the xchem user

# App (django) secrets...

- name: Check django secrets
  k8s_info:
    kind: Secret
    api_version: v1
    namespace: "{{ stack_namespace }}"
    name: django
  register: s_result

- name: Set (new) django secrets
  block:

  - name: Set django secret facts (new)
    set_fact:
      stack_django_secret_key_fact: '{{ stack_django_secret_key }}'
      stack_django_superuser_password_fact: '{{ stack_django_superuser_password }}'

  - name: Write django secrets
    k8s:
      definition: "{{ lookup('template', 'secret-django.yaml.j2') }}"
      wait: yes

  when: s_result.resources|length == 0

# ISPyB secrets...

- name: Check ISPyB secrets
  k8s_info:
    kind: Secret
    api_version: v1
    namespace: "{{ stack_namespace }}"
    name: ispyb
  register: s_result

- name: Set (new) ISPyB secrets
  block:

  # These variables are in a vault file.
  # Make sure they exist.

  - name: Assert ISPyB secrets are defined
    assert:
      that:
      - stack_ispyb_user is defined
      - stack_ispyb_password is defined
      - stack_ispyb_host is defined
      - stack_ispyb_port is defined

  - name: Set ISPyB secret facts (new)
    set_fact:
      stack_ispyb_user_fact: '{{ stack_ispyb_user }}'
      stack_ispyb_password_fact: '{{ stack_ispyb_password }}'
      stack_ispyb_host_fact: '{{ stack_ispyb_host }}'
      stack_ispyb_port_fact: '{{ stack_ispyb_port }}'

  - name: Write ISPyB secrets
    k8s:
      definition: "{{ lookup('template', 'secret-ispyb.yaml.j2') }}"
      wait: yes

  when: s_result.resources|length == 0

# xchem secrets...

- name: Set (new) xchem secrets
  block:

  # These variables are in a vault file.
  # Make sure they exist.

  - name: Assert xchem secrets are defined
    assert:
      that:
      - stack_xchem_user is defined
      - stack_xchem_password is defined
      - stack_xchem_name is defined
      - stack_xchem_host is defined
      - stack_xchem_port is defined

  - name: Set xchem secret facts (new)
    set_fact:
      stack_xchem_user_fact: '{{ stack_xchem_user }}'
      stack_xchem_password_fact: '{{ stack_xchem_password }}'
      stack_xchem_name_fact: '{{ stack_xchem_name }}'
      stack_xchem_host_fact: '{{ stack_xchem_host }}'
      stack_xchem_port_fact: '{{ stack_xchem_port }}'

  - name: Write xchem secrets
    k8s:
      definition: "{{ lookup('template', 'secret-xchem.yaml.j2') }}"
      wait: yes

  when: s_result.resources|length == 0

# Now the stack and its service.

- name: Deploy stack
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - statefulset-stack
  - service-stack

- name: Wait for stack to become Ready
  k8s_info:
    kind: Pod
    name: stack-0
    namespace: "{{ stack_namespace }}"
  register: s_result
  until: >-
    s_result.resources|length == 1
    and s_result.resources[0].status.containerStatuses|length == 1
    and s_result.resources[0].status.containerStatuses[0].ready
  delay: 10
  retries: "{{ (wait_timeout|int / 10)|int }}"

# Finally the stack ingress.

- name: Deploy stack ingress
  k8s:
    definition: "{{ lookup('template', 'ingress-stack.yaml.j2') }}"
    wait: yes
