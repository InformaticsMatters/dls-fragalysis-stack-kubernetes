---

# Tasks required to change a deployed version of Fragalysis.
# Usually executed from 'site-fragalysis-stack_version-change.yaml'.
#
# This playbook first ensures that the Fragalysis namespace exists
# and that an existing deployment exists - the user is first supposed
# to have deployed the stack before changing its version.

- include_tasks: prep.yaml

# If it looks like we're deploying to OpenShift
# we need to use the k8s authentication module to login
# and obtain an API key.
- include_tasks: login.yaml
  when: okd_master_hostname is defined

# A kubernetes (or OpenShift) host and an API key must be set.
# We will either have authenticated against an OpenShift server
# or the AWX kubernetes credentials will have injected suitable
# values for the K8S_AUTH_HOST and K8S_AUTH_API_KEY environment variables.
# Either way the ansible variables 'k8s_auth_host' and
# 'k8s_auth_api_key' will have been set.
- name: Assert authentication
  assert:
    that:
    - k8s_auth_host|length > 0
    - k8s_auth_api_key|length > 0

# Go...

- block:

  # Include sensitive (encrypted) material.

  - name: Include sensitive variables
    include_vars:
      file: sensitive.vault

  # Assert namespace, a stateful set and database secrets exist...

  - name: Get expected namespace ({{ stack_namespace }})
    k8s_info:
      kind: Namespace
      name: "{{ stack_namespace }}"
    register: result

  - name: Assert namespace exists
    assert:
      that: result.resources|length > 0
      fail_msg: Namespace '{{ stack_namespace }}' does not exist

  - name: Get expected StatefulSet
    k8s_info:
      kind: StatefulSet
      name: stack
      namespace: "{{ stack_namespace }}"
    register: result

  - name: Assert stack exists
    assert:
      that: result.resources|length > 0
      fail_msg: Stack's StatefulSet does not exist

  - name: Check database secrets
    k8s_info:
      kind: Secret
      api_version: v1
      namespace: "{{ stack_namespace }}"
      name: database
    register: s_result

  - name: Assert database secrets
    assert:
      that: s_result.resources|length > 0
      fail_msg: Stack's database secrets do not exist

  # We have a namespace and stack - simply re-deploy the stack
  # As the version number is expected to have changed the stack should roll-out

  - name: Assert stack replicas
    assert:
      that: stack_replicas|int > 0

  - name: Get database secret facts (from secrets)
    set_fact:
      database_host_fact: "{{ s_result.resources[0].data.host|b64decode }}"
      database_port_fact: "{{ s_result.resources[0].data.port|b64decode }}"
      stack_db_root_password_fact: "{{ s_result.resources[0].data.root_password|b64decode }}"
      stack_db_user_password_fact: "{{ s_result.resources[0].data.user_password|b64decode }}"

  - name: Deploy stack change
    k8s:
      definition: "{{ lookup('template', 'statefulset-stack.yaml.j2') }}"
      wait: yes

  # The stacks are rolled out one after the other in reverse order
  # from Pod 'stack-{{ stack_replicas - 1 }}' to 'stack-0'.
  # Here we wait for all of them, starting with instance {{ stack_replicas - 1 }}...

  - name: Wait for each new stack to become Ready
    include_tasks: wait-for-stack.yaml
    vars:
      stack_id: "{{ item }}"
      stack_pre_wait_pause: 45
    loop: "{{ range(stack_replicas|int - 1, -1, -1)|list }}"

  # Done.

  module_defaults:
    group/k8s:
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_api_key }}"

# If it looks like we're deploying to OpenShift
# we now need to logout...
- include_tasks: logout.yaml
  when: okd_master_hostname is defined
