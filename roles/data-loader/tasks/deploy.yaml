---

- name: Check key variables
  assert:
    that:
    - loader_data_origin|string|length > 0
    - loader_data_origin|string != 'SetMe'

# Include sensitive (encrypted) material.

- name: Include sensitive variables
  include_vars:
    file: sensitive.vault

# The namespace (project) and media volume claims must exist.

- name: Check the namespace ({{ stack_namespace }})
  assert:
    that:
    - stack_namespace|string|length > 0

- name: Get the namespace
  k8s_info:
    kind: Namespace
    name: "{{ stack_namespace }}"
  register: n_result

- name: Assert namepsace exists
  assert:
    that: n_result.resources|length == 1

- name: Get the media PVC
  k8s_info:
    kind: PersistentVolumeClaim
    namespace: "{{ stack_namespace }}"
    name: media
  register: pvc_result

- name: Assert media PVC exists
  assert:
    that: pvc_result.resources|length == 1

# Launch the loader

- name: Remove any existing loader Job ({{ stack_namespace }})
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

- name: Launching new loader Job
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - secret
  - job

# Wait for the loader to complete

- name: Wait for loader Job
  k8s_info:
    kind: Job
    namespace: "{{ stack_namespace }}"
    name: loader
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 30
  retries: "{{ (wait_timeout|int / 30)|int }}"

- name: Display loader Job status
  debug:
    var: result.resources[0].status

- name: Assert loader Job success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined
