---

# Check loader-specific variables.

- name: Check loader-specific variables
  assert:
    that:
    - loader_type|string == 'nfs'
    - loader_nfs_server|string|length > 0
    - loader_nfs_server|string != 'SetMe'
    - loader_nfs_path|string|length > 0
    - loader_nfs_path|string != 'SetMe'

- name: Remove any existing loader Job ({{ stack_namespace }})
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job-{{ loader_type }}.yaml.j2') }}"
    wait: yes

# Delete the Pods left behind that are Completed ('Succeeded').
# Kubernetes *DOES NOT* remove these Job-based Pods automatically
# (see https://kubernetes.io/docs/concepts/workloads/controllers/job/).
# Instead completed Jobs need to be removed manually by the user.
# The logic that follows list all Jobs (Pods)
# that have Succeeded and then deletes them.

- name: Get Succeeded Loader Pods
  k8s_info:
    kind: Pod
    namespace: "{{ stack_namespace }}"
    label_selectors:
    - name=nfs-loader
    field_selectors:
    - status.phase=Succeeded
  register: pods_result

- name: Delete Succeeded Loader Pods
  k8s:
    kind: Pod
    namespace: "{{ stack_namespace }}"
    name: "{{ item.metadata.name }}"
    state: absent
  loop: "{{ pods_result.resources }}"
  when: pods_result.resources|length > 0

# All clean - start a new Job

- name: Launching new loader Job
  k8s:
    definition: "{{ lookup('template', 'job-{{ loader_type }}.yaml.j2') }}"
    wait: yes

# Wait for the loader to complete

- name: Wait for loader Job
  k8s_info:
    kind: Job
    namespace: "{{ stack_namespace }}"
    name: "{{ loader_type }}-loader"
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 60
  retries: "{{ (loader_timeout_minutes|int * 60 / 60)|int }}"

- name: Display loader Job status
  debug:
    var: result.resources[0].status

- name: Assert loader Job success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined
