---

# A boolean, set if the stack deployment is for a developer
# i.e. not a PRODUCTION, STAGING or DEVELOPMENT deployment.
# Developer stacks get their own auto-generated namespaces
# and ingress routes. Non-developer stacks need an explicit
# 'stack_namespace' and 'stack_hostname'.
stack_is_for_developer: yes

# The namespace to deploy the stack to.
# Not defined for user stacks  where the namespace will be created
# from the user (developer) ID and will be 'stack-{{ id }}-{{ stack_name }}'.
stack_namespace: ''

# The name of the stack to deploy the loader to, for developer stacks.
# This is used to automatically form the expected namespace
# (a combination of 'stack-{{ user_id }}-{{ name }}.
stack_name: default

# The origin of the data to load.
# Essentially a sub-path in the designated S3 bucket.
# This must be set by the user.
loader_data_origin: SetMe

# The type of loader - controls the Task file (and Job) that is actually run.
# There should be a corresponding 'deploy-{{ loader_type }}.yaml' in tasks.
loader_type: nfs

# Include the 'sensitive.yaml' file?
# This includes sensitive preset variables employed at Diamond.
loader_include_sensitive: yes

# Variables for the NFS Loader ------------------------------------------------

loader_nfs_server: 130.246.213.186
loader_nfs_path: /nfs/kubernetes-fs-media

loader_nfs_image_registry: docker.io
loader_nfs_image: xchem/fragalysis-mount-loader
loader_nfs_image_tag: latest

# Variables for the S3 loader -------------------------------------------------
# (more kept in vars/sensitive.yaml)

loader_s3_bucket_name: dls-fragalysis

# The loader image you want to deploy,
# consisting of a (public) container registry,
# image and image tag...
loader_s3_image_registry: docker.io
loader_s3_image: xchem/fragalysis-s3-loader
loader_s3_image_tag: latest

#------------------------------------------------------------------------------

# Picked up from the environment
# (typically injected by AWX/Tower)...

aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
aws_default_region: eu-central-1
