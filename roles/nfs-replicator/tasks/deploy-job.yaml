---

# Launch the replicator (as a Job)

- name: Remove replicator Job
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

- name: Get completed replicator Jobs
  k8s_info:
    kind: Job
    namespace: "{{ stack_namespace_fact }}"
    label_selectors:
    - name=nfs-replicator
    field_selectors:
    - status.phase=Completed
  register: jobs_result

- name: Display replicator Jobs
  debug:
    var: jobs_result.resources

- name: Launching new replicator Job
  k8s:
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

# Wait for the replicator to complete

- name: Wait for replicator Job ({{ replicator_job_timeout_minutes }} minutes)
  k8s_info:
    kind: Job
    namespace: "{{ stack_namespace_fact }}"
    name: nfs-replicator
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 60
  retries: "{{ (replicator_job_timeout_minutes|int * 60 / 60)|int }}"

- name: Display replicator Job status
  debug:
    var: result.resources[0].status

- name: Assert replicator Job success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined
