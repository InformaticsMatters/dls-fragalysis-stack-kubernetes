---

- name: Check key variables
  assert:
    that:
    - replicator_a_nfs_server|string|length > 0
    - replicator_a_nfs_server|string != 'SetMe'
    - replicator_a_nfs_path|string|length > 0
    - replicator_a_nfs_path|string != 'SetMe'
    - replicator_b_pvc_name|string|length > 0
    - replicator_b_pvc_name|string != 'SetMe'

- name: Check direction
  assert:
    that: replicator_direction|string in ['AtoB', 'BtoA']

# The namespace (project) and PVC claim must exist.

- name: Check the namespace ({{ stack_namespace_fact }})
  assert:
    that:
    - stack_namespace_fact|string|length > 0

- name: Get the namespace
  k8s_info:
    kind: Namespace
    name: "{{ stack_namespace_fact }}"
  register: n_result

- name: Assert namepsace exists
  assert:
    that: n_result.resources|length == 1

- name: Get the PVC
  k8s_info:
    kind: PersistentVolumeClaim
    namespace: "{{ stack_namespace_fact }}"
    name: "{{ replicator_b_pvc_name }}"
  register: pvc_result

- name: Assert PVC exists
  assert:
    that: pvc_result.resources|length == 1

# Launch the replicator

- name: Remove any existing replicator Job
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

- name: Launching new replicator Job
  k8s:
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

# Wait for the replicator to complete

- name: Wait for replicator Job
  k8s_info:
    kind: Job
    namespace: "{{ stack_namespace_fact }}"
    name: nfs-replicator
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 15
  retries: "{{ (replicator_timeout_minutes|int * 60 / 15)|int }}"

- name: Display replicator Job status
  debug:
    var: result.resources[0].status

- name: Assert replicator Job success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined
